Elm.Model = Elm.Model || {};
Elm.Model.make = function (_elm) {
   "use strict";
   _elm.Model = _elm.Model || {};
   if (_elm.Model.values) return _elm.Model.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Util = Elm.Util.make(_elm);
   var _op = {};
   var initialBody = F3(function (len,_p0,acc) {
      initialBody: while (true) {
         var _p1 = _p0;
         var _p3 = _p1._1;
         var _p2 = _p1._0;
         if (_U.eq(len,0)) return acc; else {
               var newCell = {x: _p2,y: _p3};
               var _v1 = len - 1,_v2 = {ctor: "_Tuple2",_0: _p2 + 1,_1: _p3},_v3 = A2($List._op["::"],newCell,acc);
               len = _v1;
               _p0 = _v2;
               acc = _v3;
               continue initialBody;
            }
      }
   });
   var nextBodyCell = function (snake) {
      var headCell = $Util.head(snake.body);
      var _p4 = snake.direction;
      switch (_p4.ctor)
      {case "Up": return _U.update(headCell,{y: headCell.y + 1});
         case "Down": return _U.update(headCell,{y: headCell.y - 1});
         case "Left": return _U.update(headCell,{x: headCell.x - 1});
         default: return _U.update(headCell,{x: headCell.x + 1});}
   };
   var grow = function (snake) {
      var body1 = snake.body;
      var body2 = A2($List._op["::"],nextBodyCell(snake),body1);
      return _U.update(snake,{length: snake.length + 1,body: body2});
   };
   var move = function (snake) {
      var body1 = A2($List.take,snake.length - 1,snake.body);
      var body2 = A2($List._op["::"],nextBodyCell(snake),body1);
      return _U.update(snake,{body: body2});
   };
   var Snake = F3(function (a,b,c) {    return {length: a,direction: b,body: c};});
   var Cell = F2(function (a,b) {    return {x: a,y: b};});
   var Right = {ctor: "Right"};
   var initialSnake = F2(function (len,_p5) {
      var _p6 = _p5;
      var y0 = _p6._1 / 2 | 0;
      var x0 = _p6._0 / 2 | 0;
      return {length: len,direction: Right,body: A3(initialBody,len,{ctor: "_Tuple2",_0: x0,_1: y0},_U.list([]))};
   });
   var Left = {ctor: "Left"};
   var Down = {ctor: "Down"};
   var Up = {ctor: "Up"};
   var turnLeft = function (snake) {
      var newDirection = function () {
         var _p7 = snake.direction;
         switch (_p7.ctor)
         {case "Up": return Left;
            case "Down": return Right;
            case "Left": return Down;
            default: return Up;}
      }();
      return _U.update(snake,{direction: newDirection});
   };
   var turnRight = function (snake) {
      var newDirection = function () {
         var _p8 = snake.direction;
         switch (_p8.ctor)
         {case "Up": return Right;
            case "Down": return Left;
            case "Left": return Up;
            default: return Down;}
      }();
      return _U.update(snake,{direction: newDirection});
   };
   return _elm.Model.values = {_op: _op
                              ,Up: Up
                              ,Down: Down
                              ,Left: Left
                              ,Right: Right
                              ,Cell: Cell
                              ,Snake: Snake
                              ,move: move
                              ,nextBodyCell: nextBodyCell
                              ,grow: grow
                              ,turnLeft: turnLeft
                              ,turnRight: turnRight
                              ,initialSnake: initialSnake
                              ,initialBody: initialBody};
};